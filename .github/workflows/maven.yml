# This workflow will build a Java project with Maven, and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-java-with-maven

# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.
# run: cd "${workspaceFolder}/pet"

name: Java CI with Maven

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3
    - name: Set up JDK 17
      uses: actions/setup-java@v3
      with:
        java-version: '17'
        distribution: 'temurin'
        cache: maven
        # The directory that contains the maven project
        # directory: ${{ github.workspace }}/pet
      
    - name: Build with Maven
      run: |
          cd ${{ github.workspace }}/pet
          mvn -B package

    - name: CodeReady Dependency Analytics
      # You may pin to the exact commit or the version.
      # uses: redhat-actions/crda@6310ee94a6ac8f76b4152b7267c6cd7f1277052c
      uses: redhat-actions/crda@v1
      with:
        # Path to the directory containing the manifest_file.
        manifest_directory: ${{ github.workspace }}/pet
        # Name (basename) of the manifest file to analyze. This file must exist in the manifest_directory.
        manifest_file: pom.xml
        # Command to use for dependencies installation instead of using the default commands.
    
        # deps_install_cmd: # optional
        # Name of the file to save the analysis report
        # analysis_report_name: # optional, default is crda_analysis_report
        # Snyk token to be used to authenticate to the CRDA
        # snyk_token: # optional
        # Existing CRDA key to identify the existing user
        # crda_key: # optional
        # Github token to upload SARIF file to the GitHub
        # github_token: # optional, default is ${{ github.token }}
        # Upload the generated SARIF file, by default it is set to "true". If you don't want to upload SARIF file set this input to "false"
        # upload_sarif: # optional, default is true
        # Upload the generated SARIF and JSON file as an artifact.
        # upload_artifact: # optional, default is true
        # File name of the artifact to upload. By default it is named as 'crda_report'
        # artifact_filename: # optional, default is crda_report
        # CRDA collects anonymous usage data, and is disabled by default. If you want this behaviour set this to "true"
        # consent_telemetry: # optional, default is false
        # Fail the workflow if vulnerability is found in the project.
        # This will lead to workflow failure and SARIF file would not be uploaded.
        # To set failure when vulnerability severity level is either "error" or "warning" set this input to "warning".
        # By default it is set to fail when severity level is "error",
        # or if you don't want to fail the action set this input to "never"
        # fail_on: # optional, default is error
            

     
